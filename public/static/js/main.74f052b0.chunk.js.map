{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getAuthorsQuery","gql","_templateObject","getBooksQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","style","cursor","onClick","e","setState","displayBooks","components_BookDetails","AddBook","submitForm","preventDefault","authorId","refetchQueries","query","authors","value","onSubmit","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_browser_umd","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.74f052b0.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      name\n      id\n    }\n  }\n`;\n\nconst getBookQuery = gql`\n  query($id: ID) {\n    book(id: $id) {\n      id\n      name\n      genre\n      author {\n        id\n        name\n        age\n        books {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery };\n","import React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getBookQuery } from \"../queries/queries\";\n\nclass BookDetails extends Component {\n  displayBookDetails() {\n    const { book } = this.props.data;\n    if (book) {\n      return (\n        <div>\n          <h2>Name: {book.name}</h2>\n          <p>Genre: {book.genre}</p>\n          <p>Author: {book.author.name}</p>\n          <p>All books by this author:</p>\n          <ul className=\"other-books\">\n            {book.author.books.map(item => {\n              return <li key={item.id}> {item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h4>No book selected...</h4>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return <div id=\"book-details\">{this.displayBookDetails()}</div>;\n  }\n}\n\nexport default graphql(getBookQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.bookId\n      }\n    };\n  }\n})(BookDetails);\n","import React, { Component } from \"react\";\n\nimport { graphql } from \"react-apollo\";\nimport { getBooksQuery } from \"../queries/queries\";\nimport BookDetails from \"./BookDetails\";\nclass BookList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null\n    };\n  }\n  displayBooks() {\n    let data = this.props.data;\n    if (data.loading) {\n      return <div>Loading books....</div>;\n    } else {\n      return data.books.map(book => {\n        return (\n          <li\n            style={{ cursor: \"pointer\" }}\n            key={book.id}\n            onClick={e => {\n              this.setState({ selected: book.id });\n            }}\n          >\n            {book.name}\n          </li>\n        );\n      });\n    }\n  }\n\n  render() {\n    //console.log(this.props);\n    return (\n      <div>\n        <ul id=\"book-list\">{this.displayBooks()}</ul>\n        <BookDetails bookId={this.state.selected} />\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport {\n  getAuthorsQuery,\n  addBookMutation,\n  getBooksQuery\n} from \"../queries/queries\";\n\nclass AddBook extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      genre: \"\",\n      authorId: \"\"\n    };\n  }\n\n  displayAuthors() {\n    let data = this.props.getAuthorsQuery;\n    if (data.loading) {\n      return <option>loading author....</option>;\n    } else {\n      return data.authors.map(author => {\n        return (\n          <option key={author.id} value={author.id}>\n            {author.name}\n          </option>\n        );\n      });\n    }\n  }\n  submitForm = e => {\n    e.preventDefault();\n    //console.log(this.state);\n\n    this.props.addBookMutation({\n      variables: {\n        name: this.state.name,\n        genre: this.state.genre,\n        authorId: this.state.authorId\n      },\n      refetchQueries: [\n        {\n          query: getBooksQuery\n        }\n      ]\n    });\n  };\n\n  render() {\n    return (\n      <form id=\"add-book\" onSubmit={this.submitForm}>\n        <div className=\"field\">\n          <label>Book name:</label>\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ name: e.target.value })}\n          />\n        </div>\n        <div className=\"field\">\n          <label>Genre:</label>\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ genre: e.target.value })}\n          />\n        </div>\n        <div className=\"field\">\n          <label>Author:</label>\n          <select onChange={e => this.setState({ authorId: e.target.value })}>\n            <option value=\"\">Select author</option>\n            {this.displayAuthors()}\n          </select>\n        </div>\n        <button>+</button>\n      </form>\n    );\n  }\n}\nexport default compose(\n  graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n  graphql(addBookMutation, { name: \"addBookMutation\" })\n)(AddBook);\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport BookList from \"./components/BookList\";\nimport AddBook from \"./components/AddBook\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <h3>React + Graphql + Mongodb Book list</h3>\n          <p>Made with ðŸŽ‡ by ookangzheng</p>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}